#include <stdio.h>
#include <pthread.h>
#include <math.h>
#include <sys/wait.h>
#include <signal.h>
#include <dirent.h>
#include <errno.h>
#include <sys/stat.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <string.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <sys/epoll.h>
#include <ctype.h>


static const int MAXSIZE = 5000;

struct accept_para
{
	int lfd;
	int efd;
};

void sys_err(int n,const char *str)
{
	if (n == -1){
		perror(str);
		exit(1);
	}
}

void send_error(int cfd,int status,char *title,char *text)
{
	char buf[4096] = {0};
	sprintf(buf,"%s %d %s\r\n","HTTP/1.1",status,title);
	sprintf(buf+strlen(buf),"Content-Type:%s\r\n","text/html");
	sprintf(buf+strlen(buf),"Content-Length:%d\r\n",-1);
	sprintf(buf+strlen(buf),"Connection:close\r\n");
	send(cfd,buf,strlen(buf),0);
	send(cfd,"\r\n",2,0);

	memset(buf,0,sizeof(buf));
	sprintf(buf,"<html><head><title>%d %s</title></head>\n",status,title);
	sprintf(buf+strlen(buf),"<body bgcolor=\"#cc99cc\"><h2 align=\"center\">%d %s</h2>\n",status,title);
	sprintf(buf+strlen(buf),"%s\n",text);
	sprintf(buf+strlen(buf),"<hr>\n</body>\n</html>\n");
	send(cfd,buf,strlen(buf),0);
	return ;
}
int init_listen_fd(int port,int efd)
{
	//创建监听的套接字socket lfd
	int lfd = socket(AF_INET,SOCK_STREAM,0);
	sys_err(lfd,"socket error");
	//创建服务器地址结构
	struct sockaddr_in serv_addr;
	bzero(&serv_addr,sizeof(serv_addr));
	serv_addr.sin_family = AF_INET;
	serv_addr.sin_port = htons(port);
	serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);

	//端口复用
	int opt = 1;
	setsockopt(lfd,SOL_SOCKET,SO_REUSEADDR,&opt,sizeof(opt));
	//给lfd绑定地址结构
	int ret = bind(lfd,(struct sockaddr *)&serv_addr,sizeof(serv_addr));
	sys_err(ret,"bind error");
	//设置监听上限
	ret = listen(lfd,128);
	sys_err(ret,"listen error");

	//lfd添加到epoll树上
	struct epoll_event ev;
	ev.events = EPOLLIN;
	ev.data.fd = lfd;
	ret = epoll_ctl(efd,EPOLL_CTL_ADD,lfd,&ev);
	sys_err(ret,"epoll_ctl error");

	return lfd;
}

//void *do_accept(void *arg)
void do_accept(int lfd,int efd)
{
	printf("------------do_accept---------pid is %d\n",getpid());
//	struct accept_para *ap = (struct accept_para *)arg;
	
///	int lfd = ap->lfd;
//	int efd = ap->efd;
	struct sockaddr_in clit_addr;
	socklen_t clit_addr_len = sizeof(clit_addr);

	int cfd = accept(lfd,(struct sockaddr *)&clit_addr,&clit_addr_len);
	sys_err(cfd,"accept error");

	//打印客户端IP + port
	char client_ip[64] =  {0};
	printf("cliet ip: %s,port: %d,cfd = %d\n",
			inet_ntop(AF_INET,&clit_addr.sin_addr,client_ip,sizeof(client_ip)),
			ntohs(clit_addr.sin_port),cfd);

	/*
	//设置cfd非阻塞
	int flag = fcntl(cfd,F_GETFL);
	flag |= O_NONBLOCK;
	fcntl(cfd,F_SETFL,flag);
	 */
	//将新节点cfd挂到epoll监听树上
	struct epoll_event ev;
	ev.data.fd = cfd;

	//ET 非阻塞模式
	//ev.events = EPOLLIN | EPOLLET;

	//LT 阻塞模式
	ev.events = EPOLLIN;
	int ret = epoll_ctl(efd,EPOLL_CTL_ADD,cfd,&ev);
	sys_err(ret,"epoll_ctl error");

//	pthread_exit(NULL);
}

//获取一行 \r\n	结尾的数据
int get_line(int cfd,char *buf,int size)
{
	int i = 0;
	char c = '\0';
	int n;
	while ((i < size - 1) && (c != '\n')){
		n = recv(cfd,&c,1,0);//相当于read  最后一个参数通常传0 相当于read  有数据就读 没数据就阻塞
		if (n > 0){
			if (c == '\r'){
				n = recv(cfd,&c,1,MSG_PEEK);//MSG_PEEK表示拷贝读一次  读完后管道里还有
				if ((n > 0) && (c == '\n')){
					recv(cfd,&c,1,0);
				}else{
					c = '\n';
				}
			}
			buf[i] = c;
			++i;
		}else{
			c = '\n';
		}
	}
	buf[i] = '\0';
	if (-1 == n) i = n;
	return i;
}

//断开连接
void disconnect(int cfd,int efd)
{
	int ret = epoll_ctl(efd,EPOLL_CTL_DEL,cfd,NULL);
	sys_err(ret,"epoll_ctl error");
	close(cfd);

}

/*
   HTTP/1.1 200 OK
   Content-Type:text/plain;charset=iso-8859-1
 */

//no：错误号  str:错误描述  type:回发文件类型 len:文件长度
void send_respond_head(int cfd,int no,char *str,const char *type)
{
	char buf[1024] = {0};
	sprintf(buf,"HTTP/1.1 %d %s\r\n",no,str);
	sprintf(buf+strlen(buf),"Content-Type:%s\r\n",type);
	//sprintf(buf+strlen(buf),"Content-Length:%d\r\n",len);
	send(cfd,buf,strlen(buf),0);
	send(cfd,"\r\n",2,0);
}

void sig_catch(int signo)
{
	printf("catch you !!! %d\n",signo);
	return;
}
//发送服务器本地文件给浏览器
void send_file(int cfd,const char *file)
{
	int n = 0,ret;
	char buf[1048576] = {0};
	//打开的服务器本地文件
	int fd = open(file,O_RDONLY);
	if (fd == -1){
		//404错误页面
		send_error(cfd,404,"Not Found","No such file or directory");
		return;
	}

	while ((n = read(fd,buf,sizeof(buf))) > 0){
		//	printf("---n: %d\n",n);
		ret = send(cfd,buf,n,0);
		if (ret == -1){
			printf("errno = %d\n",errno);
			if (errno == EAGAIN){
				printf("---------EAGAIN\n");
				continue;
			}else if (errno == EINTR){
				printf("---------EINTR\n");
				continue;
			}else{
				perror("send error");
				if (errno == 104){
					signal(104,sig_catch);
					break;
				}
			}
		}
		//	printf("---send ret: %d\n",ret);
		//	usleep(200000);
	}
	printf("send over....\n");
	close(fd);

}

const char *get_file_type(const char *name)
{
	const char *dot = strrchr(name,'.');
	if (dot == NULL) return "text/plain;charset=utf-8";
	if (strcmp(dot,".html") == 0 || strcmp(dot,".htm") == 0) return "text/html;charset=utf-8";
	if (strcmp(dot,".jpg") == 0 || strcmp(dot,".jpeg") == 0) return "image/jpeg";
	if (strcmp(dot,".gif") == 0) return "image/gif";
	if (strcmp(dot,".png") == 0) return "image/png";
	if (strcmp(dot,".mp3") == 0) return "audio/mp3";
	if (strcmp(dot,".mp4") == 0) return "video/mp4";
	return "text/plain;charset=utf-8";

}
int hexit(char c)
{
	if (c >= '0' && c <= '9') return c - '0';
	if (c >= 'a' && c <= 'f') return c - 'a' + 10;
	if (c >= 'A' && c <= 'F') return c - 'A' + 10;
	return 0;
}
void encode_str(char *to,int tosize,const char *from)
{
	int tolen;
	for (tolen = 0; *from != '\0' && tolen + 4 < tosize; ++from){
		if (isalnum(*from) || strchr("/_.-~",*from) != (char *)0){
			*to = *from;
			++to;
			++tolen;
		}else {
			sprintf(to,"%%%02x",(int) *from & 0xff);
			to += 3;
			tolen += 3;
		}
	}
	*to = '\0';
}
void decode_str(char *to,char *from)
{
	for (; *from != '\0'; ++to,++from){
		if (from[0] == '%' && isxdigit(from[1]) && isxdigit(from[2])){
			*to = hexit(from[1])*16 + hexit(from[2]);
			from += 2;
		}else{
			*to = *from;
		}
	}
	*to = '\0';
}

void send_dir(int cfd,const char *dirname)
{
	int i,ret;
	//拼一个html页面<table></table>
	char buf[4096] = {0};
	sprintf(buf,"<html><head><title>目录名: %s</title></head>",dirname);
	sprintf(buf+strlen(buf),"<body><h1>当前目录: %s</h1><table>",dirname);

	char enstr[1024] = {0};
	char path[1024] = {0};

	//目录项二级指针
	struct dirent **ptr;
	int num = scandir(dirname,&ptr,NULL,alphasort);

	//遍历
	for (i = 0; i < num; ++i){
		char *name = ptr[i]->d_name;
		//拼接文件的完整路径
		sprintf(path,"%s/%s",dirname,name);
		printf("path = %s =====\n",path);
		struct stat st;
		stat(path,&st);

		//编码
		encode_str(enstr,sizeof(enstr),name);

		//如果是文件
		if (S_IFREG & st.st_mode){
			sprintf(buf+strlen(buf),"<tr><td><a href=\"%s\">%s</a></td><td>%ld</td></tr>",
					enstr,name,(long)st.st_size);
		} else if (S_IFDIR & st.st_mode){//如果是目录
			sprintf(buf+strlen(buf),"<tr><td><a href=\"%s/\">%s</a></td><td>%ld</td></tr>",
					enstr,name,(long)st.st_size);

		}
		ret = send(cfd,buf,strlen(buf),0);
		if (ret == -1){
			if (errno == EAGAIN){
				perror("send error");
				continue;
			}else if(errno == EINTR){
				perror("send error");
				continue;
			}else {
				perror("send error");
				exit(1);
			}
		}
		memset(buf,0,sizeof(buf));
	}
	sprintf(buf+strlen(buf),"</table></body></html>");
	send(cfd,buf,strlen(buf),0);
	printf("dir message send ok!!!\n");
}
//处理http请求 判断文件是否存在 回发
void http_request(int cfd,char *path,const char *file)
{
	decode_str(path,path);
	if (strcmp(path,"/") == 0){
		file = "./";
	}
	struct stat sbuf;
	//判断文件是否存在
	int ret = stat(file,&sbuf);
	if (ret != 0){
		//回发浏览器404错误页面
		send_error(cfd,404,"Not Found","No such file or directory");
		return;
	}
	if (S_IFDIR & sbuf.st_mode){//目录
		//发送头信息
		send_respond_head(cfd,200,"OK",get_file_type(".html"));
		//发送目录信息
		send_dir(cfd,file);
	}else if (S_IFREG & sbuf.st_mode){//是一个普通文件
		printf("-----------It's a file\n'");

		//回发http协议应答
		//send_respond(cfd,200,"OK","Content-Type:text/plain;charset=iso-8859-1",sbuf.st_size);
		printf("----------type:%s\n",get_file_type(file));
		send_respond_head(cfd,200,"OK",get_file_type(file));
		//send_respond(cfd,200,"OK","Content-Type:image/jpeg");
		//回发给客户端请求数据内容
		pid_t pid = fork();
		if (pid == 0){
			printf("im child ----pid is %d\n",getpid());
			send_file(cfd,file);
			exit(0);
		}
		if (pid > 0) printf("parent pid is %d\n",getpid());

	}

}
void do_read(int cfd,int efd)
{
	//读取一行http协议，拆分，获取get  文件名 协议号
	char line[1024] = {0};
	int len = get_line(cfd,line,sizeof(line));//读http请求协议首行 GET /hello.c HTTP/1.1
	if (len == 0){
		printf("服务器检测到客户端关闭...\n");
		disconnect(cfd,efd);
	} else {
		char method[16],path[256],protocol[16];

		sscanf(line,"%[^ ] %[^ ] %[^ ]",method,path,protocol);
		printf("method = %s,path = %s,protocol = %s\n",method,path,protocol);

	/*
		//清空cfd缓冲区
		while (1){
			char buf[1024] = {0};

			len = get_line(cfd,buf,sizeof(buf));
			if (len == 1){
				break;
			}
			//			printf("-----len = %d,%s\n",len,buf);
			//			sleep(1);
		}
	
	*/

		//忽略大小写比较字符串的前n个字节
		if (strncasecmp(method,"GET",3) == 0){
			//			printf("http_request....\n");
			char *file = path + 1; //取出客户端要访问的文件名
			http_request(cfd,path,file);
		}

	}

}

void *tfn(void *arg)
{
	printf("im recycler....my pid is %d\n",getpid());
	pid_t pid;
	while (1) {
		pid = wait(NULL);
		if (pid != -1)
			printf("pid %d has been recycled.............\n",pid);
	}
}

void epoll_run(int port)
{
	int i = 0;
	struct epoll_event all_events[MAXSIZE];
	//创建一个epoll监听树
	int efd = epoll_create(MAXSIZE);
	sys_err(efd,"epoll_create");
	//创建lfd 并添加至监听树
	int lfd = init_listen_fd(port,efd);
	
//	struct accept_para ap;
//	ap.lfd = lfd;
//	ap.efd = efd;

	pthread_t tid,tid2;
	int ret = pthread_create(&tid,NULL,tfn,NULL);
	fprintf(stderr,"pthread_create error %s\n",strerror(ret));
	while (1){
		int ret = epoll_wait(efd,all_events,MAXSIZE,-1);
		sys_err(ret,"epoll_wait error");

		for (i = 0;i < ret; ++i){
			//只处理读事件，其他事件默认不处理
			struct epoll_event *pev = &all_events[i];
			//不是读事件
			if (!(pev->events & EPOLLIN)) continue;
			if (pev->data.fd == lfd){ //接收连接请求
				printf("客户端连接........................................................................................\n");
				do_accept(lfd,efd);
				//int ret2 = pthread_create(&tid2,NULL,do_accept,(void *)&ap);
				//fprintf(stderr,"pthread_create error %s\n",strerror(ret2));
			}else { //读数据
				printf("before do_read()...pid is %d\n",getpid());
				do_read(pev->data.fd,efd);
			}

		}
	}

}

int main(int argc,char **argv)
{
	if (argc < 3) printf("./server port path\n");
	//获取用户输入的端口
	int port = atoi(argv[1]);
	//改变进程工作目录
	int ret = chdir(argv[2]);
	if (ret != 0){
		perror("chdir error");
		exit(1);
	}
	//启动epoll监听
	epoll_run(port);



	return 0;
}
